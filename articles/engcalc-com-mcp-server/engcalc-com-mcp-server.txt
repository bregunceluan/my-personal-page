---
id: 3
name: "engcalc-com-mcp-server"
title: "Integrando EngCalc + AI com MCP"
preview: "Neste artigo, mostro como conectar a API do EngCalc ao Claude AI usando o protocolo MCP, integrando c√°lculos estruturais com intelig√™ncia artificial."
date: "2025-05*15"
tags: ["AI", "MCP", "EngCalc", ".NET", "MCP Server"]
---

# Integrando EngCalc + AI com MCP

Com certeza voc√™ j√° deve ter ouvido falar sobre MCP. Mas este, pelo menos para mim, est√° se tornando um daqueles termos que escutamos muitas vezes, mas n√£o sabemos explicar de fato o que √©.
Ent√£o, creio que valha uma r√°pida defini√ß√£o.

## O que s√£o MCPs?

MCP (Model Context Protocol) √© um protocolo aberto idealizado pela **Anthropic** (startup que criou o Claude). O objetivo √© criar um padr√£o para que aplicativos forne√ßam contexto e informa√ß√µes para uma LLM (Large Language Model).

No pr√≥prio site do MCP encontramos uma √≥tima analogia para explic√°-lo: pense em uma porta USB-C. Assim como ela fornece um padr√£o para que v√°rios dispositivos e perif√©ricos possam se conectar, o **Model Context Protocol (MCP)** fornece uma maneira padronizada de conectar modelos de IA com softwares, APIs, fontes de dados e outros sistemas.

üëâ [Leia mais aqui](https://modelcontextprotocol.io/introduction)

## O que foi implementado?

Se os MCPs fornecem contexto para um modelo de IA, podemos usar a API do **EngCalc** para fornecer um contexto sobre como dimensionar vigas?

**Sim!** Foi exatamente isso que implementei.

Para que essa funcionalidade possa ser usada pelo MCP Server (no caso, o que criei neste [projeto no GitHub](https://github.com/bregunceluan/EngCalc)), √© necess√°rio criar uma **Tool** no MCP. As [Tools](https://modelcontextprotocol.io/docs/concepts/tools) permitem que os servidores exponham funcionalidades que o cliente (Claude AI) possa executar.

Na Tool criada, fornecemos uma descri√ß√£o da fun√ß√£o, bem como uma explica√ß√£o detalhada de cada par√¢metro de entrada.

Veja o exemplo abaixo:

```csharp
[McpServerToolType]
public static class EngCalcTools
{

    [McpServerTool, Description("Dimensiona uma viga de concreto de acordo com a norma brasileira NBR-6118")]
    public static async Task<string> DimensionaVigaDeConcreto(

        EngcalcApiClient engcalcClient,

        [Description("Define o esfor√ßo solicitante de calculo ao qual a viga est√° submetida, sendo, " +
        "V(Esfor√ßo Cortante em kN), M(Esfor√ßo flexor em kN.m), T(Esfor√ßo Torsor kn.M)")] Solicitacao solicitacao,

        [Description("Define o a√ßo utilizado na viga, sendo Fyk(Esfor√ßo de escoamento do a√ßo em MPa)")] Aco aco,

        [Description("Define o concreto utilizado na viga, sendo Fck(Esfor√ßo de compress√£o do concreto em MPa)")] Concreto concreto,

        [Description("Define a geometria da viga, sendo dLinha(Altura √∫til da viga em cm), Comprimento(Comprimento da viga em cm)," +
        " Base(Largura da viga em cm), Altura(Altura total da viga em cm)")] GeometriaViga geometriaViga
        )
    {

        try
        {
            var request = new DimensionamentoRequest
            {
                Solicitacao = solicitacao,
                Aco = aco,
                Concreto = concreto,
                GeometriaViga = geometriaViga
            };

            var response = await engcalcClient.GetDimensionamentoAsync(request);

            var content = JsonSerializer.Serialize(response);

            return content;
        }
        catch (Exception)
        {
            return "Erro ao processar a solicita√ß√£o.";
        }

    }

}
```

## Beleza, mas me mostre um exemplo pr√°tico

Suponha que voc√™ queira encontrar a **altura m√≠nima** para uma viga submetida a determinados esfor√ßos, limitando √°rea de a√ßo a um valor X cm¬≤.

Voc√™ pode escrever um prompt como:

```
Para uma viga submetida √†s seguintes solicita√ß√µes:
- Momento fletor: 5.6 kN¬∑m  
- Momento torsor: 2.3 kN¬∑m

Com os seguintes materiais:
- A√ßo: 500 MPa  
- Concreto: 35 MPa

Calcule a altura necess√°ria para essa viga, sabendo que ela pode ter no m√°ximo 60 cm de altura e que a √°rea de a√ßo n√£o deve ultrapassar 8 cm¬≤.
```

> ![FOTO/IMAGE DO PROMPT](https://raw.githubusercontent.com/bregunceluan/my-personal-page/refs/heads/main/articles/engcalc-com-mcp-server/prompt.jpg)


O modelo usar√° o MCP Server para chamar a funcionalidade implementada, que faz uma chamada √† API do EngCalc. Com os resultados, o modelo poder√° ajustar par√¢metros, como a altura, at√© chegar a uma solu√ß√£o.

Voc√™ tamb√©m pode modificar o prompt, deixando que o modelo altere a resist√™ncia do concreto, buscando a op√ß√£o mais econ√¥mica poss√≠vel:

```
Para uma viga submetida √†s seguintes solicita√ß√µes:
- Momento fletor: 15.6 kN¬∑m  
- Momento torsor: 4 kN¬∑m

Com os seguintes materiais:
- A√ßo: 500 MPa

Calcule a altura necess√°ria para essa viga, sabendo que ela pode ter no m√°ximo 60 cm de altura.  
Seu objetivo √© ser o mais econ√¥mico poss√≠vel.
```

Recomendo experimentar diferentes prompts e observar os resultados. Por√©m, claro, **seja criterioso** e **avalie criticamente as respostas do modelo**.

## Ok, ok... mas posso testar sem gastar com tokens ou assinaturas?

Pode sim! Siga o passo a passo abaixo:

### Requisitos

* [.NET 8.0](https://dotnet.microsoft.com/en-us/download/dotnet/8.0)
* [Claude Desktop](https://claude.ai/download)

*(√â poss√≠vel utilizar outros modelos e clientes, mas este exemplo usa Claude AI)*

### Passo a passo

1. Instale o **Claude Desktop** e v√° em:

   ```
   Menu > Arquivo > Configura√ß√µes
   ```

> ![FOTO/IMAGE DOS SETTINGS](https://raw.githubusercontent.com/bregunceluan/my-personal-page/refs/heads/main/articles/engcalc-com-mcp-server/settings.jpg)


2. Clique em **Desenvolvedor > Editar Configura√ß√£o**.

   Isso abrir√° uma pasta. Procure o arquivo `claude_desktop_config.json`.

3. Clone o reposit√≥rio:

   ```bash
   git clone https://github.com/bregunceluan/EngCalc
   ```

4. Navegue at√© a pasta do servidor MCP:

   ```bash
   cd src/engcalc.mcp.server
   ```

5. Fa√ßa o build do projeto:

   ```bash
   dotnet build
   ```

6. Edite o `claude_desktop_config.json`, configurando o caminho do execut√°vel `engcalc.mcp.server.exe`. Exemplo:

   ```json
   {
     "mcpServers": {
       "EngCalcMCPServer": {
         "command": "C:\\Users\\seu_usu√°rio\\source\\repos\\engcalc\\src\\engcalc.mcp.server\\bin\\Debug\\net8.0\\engcalc.mcp.server.exe",
         "args": [],
         "type": "stdio"
       }
     }
   }
   ```

7. Reinicie o **Claude Desktop**. Caso continue rodando em segundo plano, feche-o tamb√©m nos √≠cones ocultos pr√≥ximos ao rel√≥gio do Windows.

Feito isso, o MCP Server estar√° integrado ao seu Claude Desktop, pronto para receber seus prompts.

üëâ Caso tenha d√∫vidas, siga tamb√©m este [tutorial oficial do MCP](https://modelcontextprotocol.io/quickstart/user).

---

## Conclus√£o

A integra√ß√£o entre o **EngCalc** e o modelo de IA **Claude** via **MCP** permite utilizar c√°lculos estruturais em tempo real como contexto para decis√µes inteligentes e iterativas feitas pela IA.

Brinque com os prompts, explore limites e, principalmente, use de forma respons√°vel e com verifica√ß√£o t√©cnica!
